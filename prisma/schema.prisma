// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique()
  password  String
  phone     String
  name      String
  routes    Route[]
  Bus       Bus[]    @relation("authorBus")
  role      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tickets   Ticket[]
}

model BusType {
  id           Int    @id @default(autoincrement())
  name         String @unique()
  numberOfSeat Int
  listTicket   String
  buses        Bus[]
}

model Bus {
  id       Int     @id @default(autoincrement())
  author   User    @relation("authorBus", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  type     BusType @relation(fields: [typeId], references: [id])
  typeId   Int
  trips    Trip[]
}

model Trip {
  id        Int       @id @default(autoincrement())
  bus       Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId     Int
  route     Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId   Int
  price     Int
  timeStart DateTime
  timeEnd   DateTime?
  status    Int
  tickets   Ticket[]
}

model Ticket {
  id       Int    @id @default(autoincrement())
  code     String
  trip     Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId   Int
  author   User?  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?
  status   Int
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String
  start     Route[]    @relation("start province")
  end       Route[]    @relation("end province")
  locations Location[]
}

model Location {
  id         Int                @id @default(autoincrement())
  name       String
  province   Province           @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  provinceId Int
  routes     RouteMapLocation[]
}

model Route {
  id              Int                @id @default(autoincrement())
  author          User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        Int
  trips           Trip[]
  startProvince   Province           @relation("start province", fields: [startProvinceId], references: [id], onDelete: Cascade)
  startProvinceId Int
  endProvince     Province           @relation("end province", fields: [endProvinceId], references: [id], onDelete: Cascade)
  endProvinceId   Int
  locations       RouteMapLocation[]
}

model RouteMapLocation {
  id         Int      @id @default(autoincrement())
  route      Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId    Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int
  type       Int
}
