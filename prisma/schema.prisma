// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique()
  password  String
  phone     String
  name      String
  routes    Route[]
  Bus       Bus[]    @relation("authorBus")
  role      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tickets   Ticket[]
  Order     Order[]
}

model BusType {
  id           String @id @default(uuid())
  name         String @unique()
  numberOfSeat Int
  listTicket   String
  buses        Bus[]
}

model Bus {
  id          String  @id @default(uuid())
  author      User    @relation("authorBus", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  numberPlate String
  type        BusType @relation(fields: [typeId], references: [id])
  typeId      String
  trips       Trip[]
}

model Trip {
  id        String    @id @default(uuid())
  bus       Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId     String
  route     Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId   String
  price     String
  timeStart DateTime
  timeEnd   DateTime?
  status    Int
  tickets   Ticket[]
}

model Ticket {
  id              String    @id @default(uuid())
  code            String
  trip            Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId          String
  startLocationId String?
  startLocation   Location? @relation(fields: [startLocationId], references: [id])
  author          User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String?
  status          Int
  Order           Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId         String?
}

model Province {
  id        String     @id @default(uuid())
  name      String
  start     Route[]    @relation("start province")
  end       Route[]    @relation("end province")
  locations Location[]
}

model Location {
  id         String             @id @default(uuid())
  name       String
  ticket     Ticket[]
  province   Province           @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  provinceId String
  routes     RouteMapLocation[]
}

model Route {
  id              String             @id @default(uuid())
  author          User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  name            String             @default("")
  trips           Trip[]
  startProvince   Province           @relation("start province", fields: [startProvinceId], references: [id], onDelete: Cascade)
  startProvinceId String
  endProvince     Province           @relation("end province", fields: [endProvinceId], references: [id], onDelete: Cascade)
  endProvinceId   String
  locations       RouteMapLocation[]
}

model RouteMapLocation {
  id         String   @id @default(uuid())
  route      Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId    String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  type       Int
}

model Order {
  id      String   @id @default(uuid())
  tickets Ticket[]
  user    User?    @relation(fields: [userId], references: [id])
  userId  String?
}
